#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–ª–µ—Ä—Ç–æ–≤ –≤ Grafana
"""

import requests
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Grafana
GRAFANA_URL = "http://localhost:3000"
USERNAME = "admin"
PASSWORD = "admin"

def check_grafana_alerts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–æ–≤ –≤ Grafana"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –≤ Grafana...")
    print(f"üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Grafana
    try:
        health_response = requests.get(f"{GRAFANA_URL}/api/health", timeout=5)
        if health_response.status_code == 200:
            print("‚úÖ Grafana –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Grafana: {e}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–µ—Ä—Ç–∞—Ö
    try:
        # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–ª–µ—Ä—Ç–æ–≤
        alerts_response = requests.get(
            f"{GRAFANA_URL}/api/alertmanager/grafana/api/v2/alerts",
            auth=(USERNAME, PASSWORD),
            timeout=10
        )
        
        if alerts_response.status_code == 200:
            alerts = alerts_response.json()
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")
            
            if alerts:
                for alert in alerts:
                    status = alert.get('status', {}).get('state', 'unknown')
                    name = alert.get('labels', {}).get('alertname', 'unnamed')
                    severity = alert.get('labels', {}).get('severity', 'unknown')
                    
                    status_icon = "üö®" if status == "firing" else "‚úÖ" if status == "resolved" else "‚è≥"
                    severity_icon = "üî¥" if severity == "critical" else "üü°" if severity == "warning" else "üîµ"
                    
                    print(f"{status_icon} {severity_icon} {name}: {status}")
            else:
                print("‚ÑπÔ∏è  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {alerts_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤
    try:
        rules_response = requests.get(
            f"{GRAFANA_URL}/api/ruler/grafana/api/v1/rules",
            auth=(USERNAME, PASSWORD),
            timeout=10
        )
        
        if rules_response.status_code == 200:
            rules = rules_response.json()
            print(f"\nüìã –ü—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(rules) if rules else 0}")
            
            if rules:
                for namespace, groups in rules.items():
                    print(f"üìÅ Namespace: {namespace}")
                    for group in groups:
                        group_name = group.get('name', 'unnamed')
                        rules_count = len(group.get('rules', []))
                        print(f"  üìÇ Group: {group_name} ({rules_count} –ø—Ä–∞–≤–∏–ª)")
                        
                        for rule in group.get('rules', []):
                            rule_name = rule.get('alert', 'unnamed')
                            print(f"    üìå {rule_name}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª: {rules_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª: {e}")

if __name__ == "__main__":
    check_grafana_alerts()
