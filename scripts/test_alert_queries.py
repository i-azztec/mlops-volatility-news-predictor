#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
"""

import psycopg2
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'database': 'monitoring',
    'user': 'user',
    'password': 'password'
}

def test_alert_queries():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SQL –∑–∞–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∞–ª–µ—Ä—Ç–∞—Ö"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤...")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        # –¢–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞
        alert_queries = [
            {
                "name": "üö® AUC Critical Alert (< 0.52)",
                "query": "SELECT EXTRACT(EPOCH FROM timestamp) * 1000 as time, metric_value as value FROM volatility_metrics WHERE metric_name = 'auc' ORDER BY timestamp DESC LIMIT 1",
                "threshold": 0.52,
                "operator": "<"
            },
            {
                "name": "‚ö†Ô∏è F1-Score Warning Alert (< 0.65)",
                "query": "SELECT EXTRACT(EPOCH FROM timestamp) * 1000 as time, metric_value as value FROM volatility_metrics WHERE metric_name = 'f1' ORDER BY timestamp DESC LIMIT 1",
                "threshold": 0.65,
                "operator": "<"
            },
            {
                "name": "‚ö†Ô∏è Accuracy Warning Alert (< 0.65)",
                "query": "SELECT EXTRACT(EPOCH FROM timestamp) * 1000 as time, metric_value as value FROM volatility_metrics WHERE metric_name = 'accuracy' ORDER BY timestamp DESC LIMIT 1",
                "threshold": 0.65,
                "operator": "<"
            },
            {
                "name": "‚ö†Ô∏è Data Drift Warning Alert (> 0.3)",
                "query": "SELECT EXTRACT(EPOCH FROM timestamp) * 1000 as time, metric_value as value FROM volatility_metrics WHERE metric_name = 'drift_share' ORDER BY timestamp DESC LIMIT 1",
                "threshold": 0.3,
                "operator": ">"
            }
        ]
        
        for alert in alert_queries:
            print(f"\n{alert['name']}")
            print("-" * 50)
            
            cursor.execute(alert['query'])
            result = cursor.fetchone()
            
            if result:
                timestamp, value = result
                timestamp_readable = datetime.fromtimestamp(timestamp / 1000).strftime('%Y-%m-%d %H:%M:%S')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –∞–ª–µ—Ä—Ç–∞
                if alert['operator'] == "<":
                    should_alert = value < alert['threshold']
                else:  # operator == ">"
                    should_alert = value > alert['threshold']
                
                status_icon = "üö® ALERT!" if should_alert else "‚úÖ OK"
                
                print(f"üìä –ó–Ω–∞—á–µ–Ω–∏–µ: {value:.3f}")
                print(f"üéØ –ü–æ—Ä–æ–≥: {alert['operator']} {alert['threshold']}")
                print(f"üìÖ –í—Ä–µ–º—è: {timestamp_readable}")
                print(f"üîî –°—Ç–∞—Ç—É—Å: {status_icon}")
                
                if should_alert:
                    print(f"üí• –ê–õ–ï–†–¢ –î–û–õ–ñ–ï–ù –°–†–ê–ë–û–¢–ê–¢–¨!")
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

if __name__ == "__main__":
    test_alert_queries()
