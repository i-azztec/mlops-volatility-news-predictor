#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç MLOps –ø–∞–π–ø–ª–∞–π–Ω–∞ –±–µ–∑ Docker
"""

from src.train import create_model_pipeline, prepare_features
import pandas as pd
from sklearn.metrics import accuracy_score

def test_model_training():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤—ã–±–æ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö
    train_data = pd.read_parquet('data/processed/train_tall.parquet').head(1000)
    val_data = pd.read_parquet('data/processed/val_tall.parquet').head(500)
    
    print(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {train_data.shape}")
    print(f"–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {val_data.shape}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    X_train, y_train, numeric_features = prepare_features(train_data)
    X_val, y_val, _ = prepare_features(val_data)
    
    print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏: {X_train.shape}, —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {y_train.shape}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
    model = create_model_pipeline(
        max_features=100,
        ngram_range=(1, 1),
        xgb_params={
            'eval_metric': 'logloss', 
            'random_state': 42, 
            'max_depth': 3, 
            'n_estimators': 10
        }
    )
    
    print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
    
    # –û–±—É—á–∞–µ–º
    model.fit(X_train, y_train)
    print("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞!")
    
    # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞
    pred = model.predict(X_val)
    acc = accuracy_score(y_val, pred)
    print(f"üìä Accuracy –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {acc:.3f}")
    
    return model

if __name__ == "__main__":
    model = test_model_training()
    print("üéâ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
