#!/usr/bin/env python3
"""
–¢–µ—Å—Ç scoring flow –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç production –º–æ–¥–µ–ª–∏
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from src.predict import predict_daily_batch
from src.train import create_model_pipeline, prepare_features
import pandas as pd

def test_scoring_locally():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º scoring —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤—ã–±–æ—Ä–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    train_data = pd.read_parquet('data/processed/train_tall.parquet').head(1000)
    test_data = pd.read_parquet('data/processed/test_tall.parquet').head(100)
    
    # –û–±—É—á–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
    X_train, y_train, _ = prepare_features(train_data)
    model = create_model_pipeline(
        max_features=100,
        ngram_range=(1, 1),
        xgb_params={'eval_metric': 'logloss', 'random_state': 42, 'max_depth': 3, 'n_estimators': 10}
    )
    model.fit(X_train, y_train)
    print("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è
    test_day = test_data[test_data['Date'] == test_data['Date'].iloc[0]]
    headlines = test_day['Headline'].tolist()
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    historical_features = {
        col: test_day[col].iloc[0] 
        for col in test_day.columns 
        if col not in ['Date', 'Headline', 'vol_up']
    }
    
    print(f"üì∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å {len(headlines)} –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
    
    # –î–µ–ª–∞–µ–º batch –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    result = predict_daily_batch(headlines, model, historical_features)
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    print(f"  - –î–∞—Ç–∞: {result['date']}")
    print(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {result['num_headlines']}")
    print(f"  - –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result['prediction_mean_proba']:.3f}")
    print(f"  - –ö–ª–∞—Å—Å (—Å—Ä–µ–¥–Ω–∏–π): {result['prediction_mean_class']}")
    print(f"  - –ú–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {result['prediction_majority_vote']}")
    print(f"  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result['prediction_max_proba']:.3f}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏—Å—Ç–∏–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    true_label = test_day['vol_up'].iloc[0]
    pred_label = result['prediction_mean_class']
    accuracy = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ" if pred_label == true_label else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    print(f"  - –ò—Å—Ç–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞: {true_label}, –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {pred_label} ({accuracy})")
    
    return result

if __name__ == "__main__":
    result = test_scoring_locally()
    print("üéâ –¢–µ—Å—Ç scoring –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
